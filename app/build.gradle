apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"
    defaultConfig {
        applicationId "com.fish.version2asset"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        demo{
            //和debug使用同一个签名
            signingConfig signingConfigs.debug
        }
    }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.0.1'
    testCompile 'junit:junit:4.12'
}

def  runtime_config_file = 'app/src/main/assets/runtime_config'

project.afterEvaluate{
    println "我擦task size "+tasks.size()
    //找到 preDebugBuild 任务，然后添加一个 Action
    tasks.getByName("prepareDebugDependencies"){
        it.doFirst{
            println "generate debug configuration for ${project.name}"
            def configFile = new File(runtime_config_file)
            configFile.withOutputStream{os->
                os << 'I am Debug\n'  //往配置文件里写 I am Debug
            }
        }
    }
    //找到 preReleaseBuild 任务

    tasks.getByName("prepareReleaseDependencies"){
        it.doFirst{
            println "generate release configuration for ${project.name}"
            def configFile = new File(runtime_config_file)
            configFile.withOutputStream{os->
                os << 'I am release\n'
            }
        }
    }
    //找到 preDemoBuild。这个任务明显是因为我们在 buildType 里添加了一个 demo 的元素

    //所以 Android APP 插件自动为我们生成的

    tasks.getByName("prepareDemoDependencies"){
        it.doFirst{
            println "generate demo configuration for ${project.name}"
            def configFile = new File(runtime_config_file)
            configFile.withOutputStream{os->
                os << 'I am Demo\n'
            }
        }
    }
}